# herding cats

================================================================================================
## SUM FUNCTION
================================================================================================
def sum(xs: List[Int]): Int = xs.foldLeft(0)( _ + _ )
sum: (xs: List[Int])Int

scala> sum(List(1,2,3))
res0: Int = 6

// Monoid
object IntMonoid {
     |          def mappend(a: Int, b: Int): Int = a + b
     |          def mzero: Int = 0
     |        }
defined object IntMonoid

scala>  def sum(xs: List[Int]): Int = xs.foldLeft(IntMonoid.mzero)(IntMonoid.mappend)
sum: (xs: List[Int])Int

scala> sum(List(1,2,3,4))
res1: Int = 10

// Parametric Monoid
scala> trait Monoid[A] {
     |          def mappend(a1: A, a2: A): A
     |          def mzero: A
     |        }
defined trait Monoid

scala> object IntMonoid extends Monoid[Int] {
     |          def mappend(a: Int, b: Int): Int = a + b
     |          def mzero: Int = 0
     |        }
defined object IntMonoid

scala> def sum(xs: List[Int], m: Monoid[Int]): Int = xs.foldLeft(m.mzero)(m.mappend)
sum: (xs: List[Int], m: Monoid[Int])Int

scala> sum(List(1, 2, 3, 4), IntMonoid)
res2: Int = 10

// IMPLICIT Monoid
scala> def sum[A](xs: List[A])(implicit m: Monoid[A]): A = xs.fold(m.mzero)(m.mappend)
sum: [A](xs: List[A])(implicit m: Monoid[A])A

scala> sum(List(1,2,3,4))
          ^
       error: could not find implicit value for parameter m: Monoid[Int]

scala> implicit val intMonoid = IntMonoid
intMonoid: IntMonoid.type = IntMonoid$@145a821d

scala> sum(List(1,2,3,4))
res5: Int = 10

scala> def sum[A: Monoid](xs: List[A]): A = {
     |          val m = implicitly[Monoid[A]]
     |          xs.foldLeft(m.mzero)(m.mappend)
     |        }
sum: [A](xs: List[A])(implicit evidence$1: Monoid[A])A

scala> sum(List(1,2,3,4))
res6: Int = 10

SUMMARY: =======================================================================================
trait Monoid[A] {
  def mappend(a1: A, a2: A): A
  def mzero: A
}
object Monoid {
  implicit val IntMonoid: Monoid[Int] = new Monoid[Int] {
    def mappend(a: Int, b: Int): Int = a + b
    def mzero: Int = 0
  }
  implicit val StringMonoid: Monoid[String] = new Monoid[String] {
    def mappend(a: String, b: String): String = a + b
    def mzero: String = ""
  }
}
def sum[A: Monoid](xs: List[A]): A = {
  val m = implicitly[Monoid[A]]
  xs.foldLeft(m.mzero)(m.mappend)
}

================================================================================================
## FOLD LEFT
================================================================================================
trait FoldLeft[F[_]] {
  def foldLeft[A, B](xs: F[A], b: B, f: (B, A) => B): B
}
object FoldLeft {
  implicit val FoldLeftList: FoldLeft[List] = new FoldLeft[List] {
    def foldLeft[A, B](xs: List[A], b: B, f: (B, A) => B) = xs.foldLeft(b)(f)
  }
}

def sum[M[_]: FoldLeft, A: Monoid](xs: M[A]): A = {
  val m = implicitly[Monoid[A]]
  val fl = implicitly[FoldLeft[M]]
  fl.foldLeft(xs, m.mzero, m.mappend)
}

import FoldLeft._
import FoldLeft._

scala> sum(List(1, 2, 3))
          ^
       error: could not find implicit value for evidence parameter of type Monoid[Int]

scala> import Monoid
   object Monoid

scala> import Monoid._
import Monoid._

scala> sum(List(1, 2, 3))
res2: Int = 6

scala> sum(List("a", "b", "c"))
res3: String = abc

================================================================================================